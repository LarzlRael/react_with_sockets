{"version":3,"sources":["context/SocketContext.js","hooks/useSocket.js","hooks/useMapBox.js","pages/MapaPage.js","MapasApp.js","index.js"],"names":["SocketContext","createContext","SocketProvider","children","serverPath","socket","useMemo","io","connect","transports","useState","online","setOnline","useEffect","connected","on","useSocket","process","Provider","value","mapboxgl","workerClass","require","default","accessToken","initialPoint","lng","lat","zoom","MapaPage","useContext","mapaDiv","useRef","setRef","useCallback","node","current","marcadores","movimientoMarcador","Subject","nuevoMarcador","mapa","coords","setCoords","agregarMarcador","ev","id","lngLat","marker","Marker","v4","setLngLat","addTo","setDraggable","next","target","getLngLat","actualizarMarcador","map","Map","container","style","center","getCenter","toFixed","getZoom","nuevoMarcador$","movimientoMarcador$","useMapBox","Object","keys","key","subscribe","marcador","emit","className","ref","MapasApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cfef5451.chunk.js","sourcesContent":["import React from 'react';\r\nimport { createContext } from 'react';\r\nimport { useSocket } from '../hooks/useSocket'\r\n\r\nexport const SocketContext = createContext();\r\n\r\nconst URL_CONECTION = process.env.REACT_APP_URI_CONNECTION;\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n\r\n    const { socket, online } = useSocket(URL_CONECTION);\r\n\r\n    return (\r\n        <SocketContext.Provider value={{ socket, online }}>\r\n            { children}\r\n        </SocketContext.Provider>\r\n    )\r\n}","import { useEffect, useMemo, useState } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\n\r\nexport const useSocket = (serverPath) => {\r\n\r\n    const socket = useMemo(() => io.connect(serverPath, { transports: ['websocket'] }), [serverPath]);\r\n    const [online, setOnline] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setOnline(socket.connected);\r\n    }, [socket])\r\n\r\n    useEffect(() => {\r\n        socket.on('connect', () => setOnline(true));\r\n    }, [socket])\r\n\r\n    useEffect(() => {\r\n        socket.on('disconnect', () => setOnline(false));\r\n    }, [socket])\r\n\r\n    return {\r\n        socket,\r\n        online\r\n    }\r\n}","\r\nimport { useRef, useEffect, useState, useCallback } from 'react'\r\nimport mapboxgl from 'mapbox-gl';\r\n\r\nimport { v4 } from 'uuid';\r\nimport { Subject } from 'rxjs';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nmapboxgl.workerClass = require('worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker').default;\r\n\r\n\r\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_KEY;\r\n\r\nexport const useMapBox = (initialPoint) => {\r\n\r\n    // Referencia el DIV del mapa\r\n    const mapaDiv = useRef();\r\n    const setRef = useCallback((node) => {\r\n        mapaDiv.current = node\r\n    }, [])\r\n\r\n    // refs to markers\r\n    const marcadores = useRef({});\r\n\r\n    //? Observables de Rxjs\r\n    const movimientoMarcador = useRef(new Subject());\r\n    const nuevoMarcador = useRef(new Subject());\r\n\r\n    const mapa = useRef();\r\n    const [coords, setCoords] = useState(initialPoint);\r\n\r\n\r\n    //? function to add markers\r\n\r\n    const agregarMarcador = useCallback((ev, id) => {\r\n        const { lng, lat } = ev.lngLat || ev;\r\n\r\n        const marker = new mapboxgl.Marker();\r\n\r\n        // si no tiene el id usa el v4()\r\n        marker.id = id ?? v4();\r\n\r\n        marker\r\n            .setLngLat([lng, lat])\r\n            .addTo(mapa.current)\r\n            .setDraggable(true);\r\n\r\n        //? asignamos el objeto de marcadores\r\n        marcadores.current[marker.id] = marker;\r\n\r\n        //TODO si el marcador tiene ID no emitir\r\n        if (!id) {\r\n            nuevoMarcador.current.next({\r\n                id: marker.id,\r\n                lng,\r\n                lat\r\n            });\r\n\r\n        }\r\n\r\n        // escuchar movimientos del marcador\r\n        marker.on('drag', ({ target }) => {\r\n            const { id } = target;\r\n            const { lng, lat } = target.getLngLat();\r\n\r\n            // TODO: emitir los cambios del marcador\r\n            movimientoMarcador.current.next({\r\n                id, lng, lat\r\n            })\r\n        });\r\n\r\n    }, []);\r\n\r\n    // function to update the marker ubication\r\n\r\n    const actualizarMarcador = useCallback(({ id, lng, lat }) => {\r\n\r\n\r\n        // funcion propia de mapbox\r\n        marcadores.current[id].setLngLat([lng, lat]);\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const map = new mapboxgl.Map({\r\n            container: mapaDiv.current,\r\n            style: 'mapbox://styles/mapbox/streets-v11',\r\n\r\n            //? first the lng and befero the lat\r\n            center: [initialPoint.lng, initialPoint.lat],\r\n            zoom: initialPoint.zoom\r\n        });\r\n\r\n        mapa.current = map;\r\n\r\n    }, [initialPoint]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        mapa.current?.on('move', () => {\r\n            const { lng, lat } = mapa.current.getCenter();\r\n            setCoords({\r\n                lng: lng.toFixed(4),\r\n                lat: lat.toFixed(4),\r\n                zoom: mapa.current.getZoom()\r\n            })\r\n        })\r\n    }, []);\r\n\r\n\r\n    // add the checked when clicked\r\n\r\n    useEffect(() => {\r\n        // recibe y envia el mismo argumento y puede reducrise de la siguiente manera\r\n        mapa.current?.on('click', agregarMarcador);\r\n\r\n    }, [agregarMarcador]);\r\n\r\n    return {\r\n        // states\r\n        coords,\r\n        marcadores,\r\n        nuevoMarcador$: nuevoMarcador.current,\r\n        movimientoMarcador$: movimientoMarcador.current,\r\n        // functions\r\n        setRef,\r\n        agregarMarcador,\r\n        actualizarMarcador\r\n    }\r\n}","import React, { useContext, useEffect } from 'react'\r\nimport { SocketContext } from '../context/SocketContext';\r\nimport { useMapBox } from '../hooks/useMapBox';\r\n\r\n\r\nconst initialPoint = {\r\n    lng: -122.4725,\r\n    lat: 37.8010,\r\n    zoom: 10\r\n}\r\n\r\nconst MapaPage = () => {\r\n\r\n    const { socket } = useContext(SocketContext);\r\n\r\n    const { setRef, coords, nuevoMarcador$,\r\n        movimientoMarcador$, agregarMarcador, actualizarMarcador } = useMapBox(initialPoint);\r\n\r\n    // Escuchar los marcadores existentes\r\n    useEffect(() => {\r\n        socket.on('marcadores-activos', (marcadores) => {\r\n            for (const key of Object.keys(marcadores)) {\r\n                agregarMarcador(marcadores[key], key);\r\n            }\r\n        })\r\n        //agregarMarcador(marcadores)\r\n    }, [socket, agregarMarcador])\r\n\r\n    // nuevoMarcador\r\n    useEffect(() => {\r\n\r\n        nuevoMarcador$.subscribe(marcador => {\r\n            socket.emit('marcador-nuevo', marcador);\r\n        })\r\n\r\n    }, [nuevoMarcador$, socket]);\r\n\r\n    useEffect(() => {\r\n\r\n        movimientoMarcador$.subscribe(marcador => {\r\n            socket.emit('marcador-actualizado', marcador);\r\n        });\r\n\r\n    }, [socket, movimientoMarcador$]);\r\n\r\n    useEffect(() => {\r\n\r\n        socket.on('marcador-nuevo', (marcador) => {\r\n            agregarMarcador(marcador, marcador.id);\r\n        });\r\n\r\n    }, [socket, agregarMarcador]);\r\n\r\n\r\n    //? Mover marcador mediante sockets\r\n    useEffect(() => {\r\n        \r\n        socket.on('marcador-actualizado', (marcador) => {\r\n            actualizarMarcador(marcador);\r\n        });\r\n\r\n    }, [socket, actualizarMarcador]);\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"info\">\r\n                Lng:{coords.lng} | Lat:{coords.lat} | zoom:{coords.zoom}\r\n            </div>\r\n            <div\r\n                ref={setRef}\r\n                className=\"mapContainer\" ></div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MapaPage\r\n","import React from 'react'\r\nimport { SocketProvider } from './context/SocketContext'\r\nimport MapaPage from './pages/MapaPage'\r\n\r\nexport const MapasApp = () => {\r\n    return (\r\n        <SocketProvider>\r\n            <MapaPage />\r\n        </SocketProvider>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport { MapasApp } from './MapasApp';\r\n\r\nReactDOM.render(\r\n\r\n  <MapasApp />,\r\n\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}